package com.day11;

public class Account {
	/*
	 객체(Object);
	 - 물건, 대상
	 
	 객제 지향 프로그래밍
	 - 사물과 대상의 행동을 있는 그대로 실체화시키는 형태의 프로그래밍
	 예) 나는 과일장사에게 두 개의 사과를 구매했다.
	 에) 나는 은행계좌에서 30000원을 출금했다.
	 
	 객체는 상태정보(속성, 데이터)와 행동(기능)으로 구성됨
	 상태정보 = > 변수를 통해서 표현됨
	 행동 => 메서드를 통해 표현됨
	 
	 은행계좌객체
	 1) 상태정보 - 계좌번호, 이름, 잔액
	 2) 행동 - 출금하다, 입금하다
	 
	 은행계좌 객체를 구성하는 변수와 메서드를 묶어서 객체라는 것을 통해서 실체화하면 됨
	 
	 객체를 생성하기 전에 객체의 생성을 위한 틀을 먼저 만들어야 함
	 붕어빵을 만들기 위해서는 붕어빵틀이 필요
	 은행계좌 객체를 만들기 위해서는 이를 위한 틀을 먼저 만들어야 함
	 => Account 라는 이름의 틀을 정의, 이러한 틀을 가리켜 클래스라 함
	 ★★★★★
	★★ 클래스는 실체(객체)가 아닌 틀★★
 	★★클래스는 객체를 구성하는데 필요한 변수와 메서드로 이뤄짐★★
 	
 	클래스		객체
 	-------------------
 	제품설계도		제품
 	자동차설계도	자동차
 	붕어빵 틀		붕어빵
 	-------------------
 	틀			실체
 	
 	=> 클래스란 똑같은 무엇인가를 계속해서 만들어 낼 수 있는 설계도면
 	객체란 클래스로 만든 피조물
 	
 	클래스 정의하기
 	class 클래스이름{
 		멤버변수,필드;
 		메서드();
 	}
	 */
	
	//1. 멤버변수 선언
	String accId; //계좌번호
	String name;  //이름
	int balance; //잔액
	//2. 메서드 선언
	//입금하다
	public void deposit (int money) {
		balance+=money;
	}
	
	//출금하다
	public void withdraw(int money) {
		balance-=money;
	}
	
	public void showInfo()	{
		System.out.println("계좌번호 : " + accId);
		System.out.println("이름 : " + name);
		System.out.println("잔액 : " + balance + "\n");
		
	}
	//클래스를 작성한 다음, 클래스로부터 객체를 생성하여 사용
	//객체를 사용한다는 것 => 객체가 가지고 있는 속성과 기능을 사용한다는 뜻


	public static void main(String[] args) {

	}

}
